name: Update Version

on:
  workflow_dispatch:
    inputs:
      helmchart:
        description: 'Helmchart will be triggered'
        required: true

  pull_request:
    types:
      - closed
    branches:
      - master
      - dev
  push:
    branches:
      - master
#  pull_request:
#    branches: [ master ]
#    paths:
#      - 'src/**'

jobs:
  update_version:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Update Version
        run: |
          VERSION=$(cat version.txt)
          
          NEW_VERSION=$(echo $VERSION | awk -F. '{printf("%d.%d.%d", $1,$2,$3+1)}')
          
          echo $NEW_VERSION > version.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GALAKSIYA }}

      - name: Update POM version
        run: |
          # Parse the version from the file
          VERSION=$(cat version.txt)
          
          # Update the pom file with the new version
          mvn -f api/pom.xml versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
        env:
          GITHUB_TOKEN: ${{ secrets.GALAKSIYA }}

      - name: Login to Github Packages
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u USERNAME --password-stdin docker.pkg.github.com

      - name: Build with Maven
        run: mvn clean install -f api/pom.xml

      - name: Determine Version
        run: echo ::set-output name=version::$(cat version.txt)
        id: get-version

      - name: Build the Docker Image
        run: docker build -t docker.pkg.github.com/${{ github.repository }}/deepin-api:${{ steps.get-version.outputs.version }} .

      - name: Push the Docker Image
        run: docker push docker.pkg.github.com/${{ github.repository }}/deepin-api:${{ steps.get-version.outputs.version }}

      #      - name: Get commit messages
#        run: |
#          COMMITS=$(git log --pretty=format:"* %s" -5)
#          echo "::set-output name=commits::${COMMITS}"
#      - name: Get Pull Request Changes
#        run: |
#          CHANGES=$(git log --pretty=format:"%s" HEAD...$GITHUB_SHA)
#          echo $GITHUB_SHA
#          echo "::set-env name=PR_CHANGES::$CHANGES"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-version.outputs.version }}
          release_name: Release ${{ steps.get-version.outputs.version }}
#          body: |
#            ## Changes in this release:
#            ${{ env.PR_CHANGES }}
          draft: false
          prerelease: false

      - name: Upload Release Jar Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./api/target/api-${{ steps.get-version.outputs.version }}.jar
          asset_name: deepin-api:${{ steps.get-version.outputs.version }}.jar
          asset_content_type: application/java-archive

      - name: Create Zip archive
        run: |
          zip -r api:${{ steps.create_release.outputs.release_id }}.zip api/

      - name: Upload Release Zip Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: api:${{ steps.create_release.outputs.release_id }}.zip
          asset_name: api:${{ steps.create_release.outputs.release_id }}.zip
          asset_content_type: application/zip

     
      
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
